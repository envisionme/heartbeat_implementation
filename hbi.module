<?php

/**
 * Custom code for heartbeat implementation
 *
 * Messages are logged by rules and by custom development.
 *
 * Logging by custom development:
 * ------------------------------
 *   - Add a story (heartbeat_example)
 *   - Become a friend (UR)
 *   - Become a friend (flag)
 *   - Follow a user (flag)
 *   - Become a fan of a user (flag)
 *
 *   - Promote an article as most recent (hbi)
 *
 * Logging by rules:
 * -----------------
 *   - When user joins a group ()
 *   - when user adds a page ()
 *   - When article is created ()
 *   - When a group article is updated ()
 *   - When article is posted in a group ()
 *   - When a user adds a comment ()
 *   - When User reacts on a heartbeat activity message ()
 *   - After shouting, log shout message ()
 *   - User becomes a fan of A node ()
 *
 *   - User becomes co-admin of a group [disabled]
 */

/**
 * Implementation of hook_heartbeat_register_access_types().
 */
function hbi_heartbeat_register_access_types() {
  return array(
    0 => array(
      'name' => 'News Feed',
      'class' => 'MyActivity',
      'path' => 'myactivity.inc',
      'module' => 'hbi'
    ),
  );
}


include 'custom.heartbeat_common.inc';

/**
 * Implementation of hook_ini().
 */
function hbi_init() {
  drupal_add_js(drupal_get_path('module', 'hbi') . '/hbi.js');
  drupal_add_css(drupal_get_path('module', 'hbi') . '/hbi.css');
}

/**
 * Implementation of hook_nodeapi().
 */
function hbi_nodeapi(&$node, $op, $arg = 0) {

  // update the message timestamp so its promoted to top
  if ($op == 'update' && $node->type == 'article') {

    // Select the row to promote
    $result = db_query_range("SELECT * FROM {heartbeat_activity}
      WHERE uid = %d AND nid = %d AND message_id = 'og_add_article_content'",
      $node->uid, $node->nid, 0, 1);
    $row = db_fetch_object($result);

    // Delete the row
    db_query("DELETE FROM {heartbeat_activity} WHERE uaid = %d", $row->uaid);

    // Prepare for insertion
    $row->uaid = 0;
    $row->timestamp = $_SERVER['REQUEST_TIME'];

    // Change the access if user profile setting changed
    $account = user_load($row->uid);
    if (isset($account->heartbeat_activity_settings[$row->message_id]['access'])) {
      $row->access = $account->heartbeat_activity_settings[$row->message_id]['access'];
    }

    // Insert the row again
    drupal_write_record('heartbeat_activity', $row);
  }

  // When a page or story is updated, log activity for it.
  if ($op == 'update' && in_array($node->type, array('doc', 'geshinode', 'blockpage'))) {

    $message_id = 'heartbeat_edit_node';
    $variables = array(
      '@username' => l(user_load($node->uid)->name, 'user/' . $node->uid),
      '@node_type' => $node->type == 'geshinode' ? 'code' : $node->type,
      '@node_title' => l($node->title, 'node/' . $node->nid),
    );

    heartbeat_api_log($message_id, $node->uid, 0, $node->nid, 0, $variables);

  }
}

/**
 * Implementation of hook_user_relationships().
 */
function hbi_user_relationships($op, &$relationship) {

  if ($op == 'approve' && $relationship->name == 'contact') {

    $message_id = 'heartbeat_become_friends_ur';
    $variables = array(
      '@user1' => l($relationship->requestee->name, 'user/' . $relationship->requestee->uid),
      '@relation_type' => 'contact',
      '@user2' => l($relationship->requester->name, 'user/' . $relationship->requester->uid),
      'duplicate'=> 1,
    );
    heartbeat_api_log($message_id, $relationship->requestee->uid, $relationship->requester->uid, 0, 0, $variables);

    $variables_reversed = $variables;
    $variables_reversed['@user1'] = $variables['@user2'];
    $variables_reversed['@user2'] = $variables['@user1'];
    heartbeat_api_log($message_id, $relationship->requester->uid, $relationship->requestee->uid, 0, 0, $variables_reversed);

  }

}

/**
 * Implementation of hook_flag_friend().
 */
function hbi_flag_friend($op, $friend, $user) {

  // Become a friend
  if ($op == 'approve') {

    $message_id = 'heartbeat_become_friends_flag';
    $variables = array(
      '@user1' => l($user->name, 'user/' . $user->uid),
      '@relation_type' => 'friend',
      '@user2' => l($friend->name, 'user/' . $friend->uid),
      'duplicate'=> 1,
    );
    heartbeat_api_log($message_id, $user->uid, $friend->uid, 0, 0, $variables);

    $variables_reversed = $variables;
    $variables_reversed['@user1'] = $variables['@user2'];
    $variables_reversed['@user2'] = $variables['@user1'];
    heartbeat_api_log($message_id, $friend->uid, $user->uid, 0, 0, $variables_reversed);
  }
}

/**
 * Implementation of hook_flag(). Trigger actions if any are available.
 */
function hbi_flag($action, $flag, $content_id, $account) {
  // Follow another user
  if ($action == 'flag' && $flag->content_type == 'user' && $flag->name == 'follow') {

    $message_id = 'heartbeat_follow_user';
    $variables = array(
      '@user1' => l($account->name, 'user/' . $account->uid),
      '@user2' => l(user_load($content_id)->name, 'user/' . $content_id),
    );
    heartbeat_api_log($message_id, $account->uid, $content_id, 0, 0, $variables);
  }

  // Become a fan of another user
  if ($action == 'flag' && $flag->content_type == 'user' && $flag->name == 'fan') {

    $message_id = 'heartbeat_flag_userfan_add';
    $variables = array(
      '@user1' => l($account->name, 'user/' . $account->uid),
      '@user2' => l(user_load($content_id)->name, 'user/' . $content_id),
    );
    heartbeat_api_log($message_id, $account->uid, $content_id, 0, 0, $variables);
  }
}

/**
 * Implementation of hook_block().
 *//*
function hbi_block($op, $delta = 0, $category = array()) {
  if ($op == 'list') {
    return array(
      0 => array(
        'info' => t('Big stream buttons'),
      )
    );
  }
  elseif ($op == 'view') {
    return array(
      'subject' => t('Big stream buttons'),
      'content' => _bigstream_buttons(),
    );
  }
}/**/

/**
 * Implementation of hook_theme().
 */
function hbi_theme() {

  return array(

    // Theme normal group post
    'heartbeat_group_post' => array(
      'arguments' => array('message' => NULL, 'node' => NULL)
    ),

    // Theme article heartbeat node
    'heartbeat_article' => array(
      'arguments' => array('message' => NULL, 'node' => NULL)
    ),
    
    // Theme Showcase heartbeat node
    'heartbeat_showcase_item' => array(
      'arguments' => array('message' => NULL, 'node' => NULL)
    ),

    // Theme agenda or event group post
    'heartbeat_event' => array(
      'arguments' => array('message' => NULL, 'node' => NULL)
    ),

    // Theme album group post
    'heartbeat_album' => array(
      'arguments' => array('message' => NULL, 'node' => NULL)
    ),

    // Video content box
    'heartbeat_video' => array(
      'arguments' => array('nid' => NULL,'movie' => NULL, 'image' => NULL)
    ),

    // Friends box
    'heartbeat_friends' => array(
      'arguments' => array('message' => NULL)
    ),
  );
}

/**
 * Implementation of hook_heartbeat_message_info
 */
function hbi_heartbeat_message_info() {
  $info = array (

    0 =>
    array (
      'message' => '!user has joined !group.',
      'message_concat' => '%user% have joined !group.',
      'message_id' => 'og_join_group',
      'concat_args' =>
      array (
        'type' => 'summary',
        'group_by' => 'node',
        'group_target' => 'user',
        'group_by_target' => '',
        'group_num_max' => '4',
        'merge_separator' => ', ',
        'merge_end_separator' => ' and ',
        'roles' =>
        array (
          0 => '0',
          1 => '0',
          2 => '0',
          3 => '0',
          4 => '0',
        ),
      ),
      'description' => 'Join a organic group',
      'perms' => '1',
      'custom' => '0',
      'variables' =>
      array (
      ),
    ),
    1 =>
    array (
      'message' => '!user added !article in !group.',
      'message_concat' => '%user% added !article in !group.',
      'message_id' => 'og_add_group_content',
      'concat_args' =>
      array (
        'type' => 'summary',
        'group_by' => 'node',
        'group_target' => 'user',
        'group_by_target' => '',
        'group_num_max' => '3',
        'merge_separator' => ',',
        'merge_end_separator' => ' and ',
        'roles' =>
        array (
          0 => '0',
          1 => '0',
          2 => '0',
          3 => '0',
          4 => '0',
        ),
      ),
      'description' => 'Add content in a group',
      'perms' => '1',
      'custom' => '0',
      'variables' =>
      array (
        '@user' => '[author:user-name-url]',
        '@article' => '[node:title-link]',
        '@group' => '[node:ogname-title-link]',
      ),
    ),
    2 =>
    array (
      'message' => '!user modified !article in !group.',
      'message_concat' => '!user modified %article% in !group.',
      'message_id' => 'og_edit_group_content',
      'concat_args' =>
      array (
        'type' => 'summary',
        'group_by' => 'user',
        'group_target' => 'article',
        'group_by_target' => '',
        'group_num_max' => '3',
        'merge_separator' => ', ',
        'merge_end_separator' => ' and ',
        'roles' =>
        array (
          0 => '0',
          1 => '0',
          2 => '0',
          3 => '0',
          4 => '0',
        ),
      ),
      'description' => 'Edit group content',
      'perms' => '1',
      'custom' => '0',
      'variables' =>
      array (
        '@user' => '[author:user-name-url]',
        '@article' => '[node:title-link]',
        '@group' => '[node:ogname-title-link]',
      ),
    ),
    3 =>
    array (
      'message' => '!message',
      'message_concat' => '',
      'message_id' => 'heartbeat_facebook_status',
      'concat_args' =>
      array (
        'type' => 'single',
        'group_by' => 'none',
        'group_target' => '',
        'group_by_target' => '',
        'group_num_max' => '',
        'merge_separator' => '',
        'merge_end_separator' => '',
        'roles' =>
        array (
          0 => '0',
          1 => '0',
          2 => '0',
          3 => '0',
          4 => '0',
          5 => '0',
        ),
      ),
      'description' => 'When a user posts a facebook status message',
      'perms' => '1',
      'custom' => HEARTBEAT_MESSAGE_DEFAULT,
      'variables' =>
      array (
        'build_mode' => 'message',
      ),
    ),


    4 =>
    array (
      'message' => '!user became a fan of !node_title.',
      'message_concat' => '!user became a fan of %node_title%.',
      'message_id' => 'heartbeat_flag_fan_add',
      'concat_args' =>
      array (
        'type' => 'summary',
        'group_by' => 'user',
        'group_target' => 'node_title',
        'group_by_target' => '',
        'group_num_max' => '10',
        'merge_separator' => ', ',
        'merge_end_separator' => ' and ',
        'roles' =>
        array (
          0 => '0',
          1 => '0',
          2 => '0',
          3 => '0',
          4 => '0',
          5 => '0',
          6 => '0',
        ),
      ),
      'description' => 'user becomes a fan',
      'perms' => '1',
      'custom' => HEARTBEAT_MESSAGE_DEFAULT,
      'variables' =>
      array (
        '@user' => '[flagging_user:user-name-url]',
        '@node_title' => '[node:title-link]',
      ),
    ),

  );
  return $info;
}

/**
 * Implementation of hook_heartbeat_theme_alter().
 *
 * Take out messages you want to retheme.
 * This can be by adding buttons, html controls, repositioning elements, ...
 * In this example we add buttons and place icons for some message types.
 * In other cases, a custom avatar is used.
 */
function hbi_heartbeat_theme_alter(&$messages, HeartbeatAccess $stream) {

  // Messages that will be shown with display suite can not be altered.
  // Criteria: publicheartbeat will be rendered in build modes
  if ($stream->stream->name == 'publicheartbeat') {
    return;
  }

  foreach ($messages as $key => $message) {

    // reset attachment
    $attachment = array();
    $comment = $message->template->attachments['heartbeat_comments'];
    $buttons = array('friend' => TRUE, 'comment' => $comment);

    $messages[$key]->display_time = FALSE;
    if ($message->message_id == 'heartbeat_shout') {

      $message_message = '<div class="icon-left-margin">';
      $message_message .= _theme_heartbeat_user_picture($message->uid);
      $message_message .= '</div>';
      $message_message .= '<div class="heartbeat-indent">'.theme('username', $message->actor).' '.$message->message . '</div>';
      $message->message = $message_message;

    }
    elseif ($message->message_id == 'heartbeat_facebook_status') {

      $message_message = '<div class="icon-left-margin">';
      $message_message .= _theme_heartbeat_user_picture($message->uid);
      $message_message .= '</div>';
      $message_message .= '<div class="heartbeat-indent">'.theme('username', $message->actor).' '.$message->message . '</div>';
      $message->message = $message_message;

    }
    elseif (in_array($message->message_id, array('heartbeat_become_friends', 'heartbeat_become_friends_flag', 'heartbeat_become_friends_ur'))) {

      $messages[$key]->message = theme('heartbeat_friends', $messages[$key]);

    }
    elseif ($message->nid > 0) {

      $node = node_load($message->nid);

      $messages[$key]->display_time = FALSE;

      // Catch some group content to theme differently
      if (in_array($message->message_id, array('og_add_group_content', 'og_edit_group_content'))) {

        if ($node->type == 'event' || $node->type == 'album') {
          $messages[$key]->message = theme('heartbeat_' . $node->type, $message, $node);
        }
        elseif ($node->type == 'report') {
          $messages[$key]->message = theme('heartbeat_group_post', $message, $node);
        }
        elseif ($node->type == 'announcement') {
          $messages[$key]->message = theme('heartbeat_group_post', $message, $node);
        }

        $buttons['member'] = TRUE;
        $buttons['wrap'] = TRUE;
      }
      // Catch the article content to present video (adds and edits)
      elseif ($node->type == 'article' && in_array($message->message_id, array('og_add_article_content', 'og_edit_group_content', 'heartbeat_edit_node'))) {

        $messages[$key]->message = theme('heartbeat_article', $message, $node);
        $buttons['wrap'] = TRUE;
      }
      elseif (in_array($node->type, array('showcase_audio', 'showcase_document', 'showcase_image', 'showcase_slide', 'showcase_video')) && in_array($message->message_id, array('og_add_article_content', 'og_edit_group_content', 'heartbeat_edit_node', 'heartbeat_add_node'))) {
        $messages[$key]->message = theme('heartbeat_showcase_item', $message, $node);
        $buttons['wrap'] = TRUE;
      }
      elseif (($node->type == 'reference') && in_array($message->message_id, array('og_add_article_content', 'og_edit_group_content', 'heartbeat_edit_node', 'heartbeat_add_node'))) {
        $messages[$key]->message = theme_heartbeat_reference($message, $node);
        $buttons['wrap'] = TRUE;
        //~ print_r($message);
      }
      elseif ($message->message_id == 'heartbeat_add_node') {
        $messages[$key]->message = theme('heartbeat_content', $message, $node);
        $buttons['wrap'] = TRUE;
      }

    }

    // Rebuild the attachments array
    if (empty($messages[$key]->template->attachments)) {
      $messages[$key]->template->attachments = array();
    }
    if (!empty($buttons) && is_array($buttons)) {
      $attachment = array('_rendered' => _theme_heartbeat_action_buttons($message, $buttons, $node));
      array_unshift($messages[$key]->template->attachments, $attachment);
    }
  }
}

/**
 * Implementation of hook_heartbeat_stream_filters().
 *   Define filters which can be called to return the
 *   messages that meet the condition of the filter.
 *
 * @see custom.heartbeat_filters.inc
 */
function hbi_heartbeat_stream_filters() {
  return array(
    'friends-and-groups' => array(
      'name' => t('Friends and my groups'),
      'access' => 'user_is_logged_in'
    ),
    'showcase' => array(
      'name' => t('Showcase')
    ),
    'status_updates' => array(
      'name' => t('Status updates')
    ),
    'events' => array(
      'name' => t('Events')
    ),
  );
}

/**
 * Theme function for a heartbeat article
 */
function theme_heartbeat_article($message, $node) {
  $output = '';
  $output .= _theme_heartbeat_icon_left('article', $message, $node);
  $output .= '<div class="heartbeat-indent">';

  // Don't like this anymore
  $output .= _theme_heartbeat_comment_button($node);

  $output .= $message->rebuild_message();

  //$output .= '<h3>' . l($node->title, 'node/' . $node->nid) . '</h3>';
  $output .= '<div class="heartbeat-teaser">';
  $output .= $node->teaser;
  // Articles have an image and optional video
  if (isset($node->field_image[0]['fid'])) {
    if (isset($node->field_video[0]['fid'])) {
      $output .= theme('heartbeat_video', $node->nid, $node->field_video[0]['filepath'], $node->field_image[0]['filepath']);
    }
    else {
      $output .= theme('imagecache', 'video_teaser', $node->field_image[0]['filepath']);
    }
  }

  $output .= '<div class="heartbeat-taxonomy-links-wrapper">';
  // Hack todays date's
  if (date('z') == date('z', $node->changed)) {
    $time = date('H:m:s', $node->changed);
  }
  else {
    $time = format_date($node->changed, 'short');
  }
  $output .= '<span>' . $time . '</span>';
  if (!empty($node->taxonomy)) {
    $output .= '<div class="heartbeat-taxonomy-links">';
    foreach ($node->taxonomy as $term) {
      $output .= ' <span>' . l(t($term->name), 'taxonomy/term/'. $term->tid) . '</span>';
    }
    $output .= '</div>';
  }

  $output .= l(t('more'), 'node/'. $node->nid, array('attributes' => array('class' => 'heartbeat-more')));
  $output .= '</div>'; // end taxonomy links wrapper
  $output .= '</div>'; // end heartbeat-teaser div

  $output .= '</div>'; // end heartbeat-indent div

  return $output;
}

/**
 * Theme function for a heartbeat reference
 */
function theme_heartbeat_reference($message, $node) {
  //~ print_r($node);
  $output = '';
  //~ $output .= _theme_heartbeat_icon_left('showcase_image', $message, $node);
  $output .= '<div class="icon-left-margin">' . _theme_heartbeat_user_picture($message->uid) . '</div>';

  $output .= '<div class="heartbeat-indent">';
  
  $account = user_load($node->uid);
  
  $output .= t('!name has added a new %type for !referenced', array(
    '!name' => theme('username', $account),
    '%type' => $message->variables['@node_type'],//'Reference',
    '!referenced' => theme('username', user_load($node->field_user[0]['uid']))//l($node->title, 'node/' . $node->nid)
  ));
  //~ $output .= _theme_heartbeat_comment_button($node);
  //~ $output .= $message->rebuild_message();

  $output .= '<div class="heartbeat-teaser">';
  $output .= '<h3>' . l($node->title, 'node/' . $node->nid) . '</h3>';
  $output .= $node->teaser;
  // Articles have an image and optional video
  /*if (isset($node->field_image[0]['fid'])) {
    if (isset($node->field_video[0]['fid'])) {
      $output .= theme('heartbeat_video', $node->nid, $node->field_video[0]['filepath'], $node->field_image[0]['filepath']);
    }
    else {
      $output .= theme('imagecache', 'video_teaser', $node->field_image[0]['filepath']);
    }
  }/**/

  $output .= l(t('more'), 'node/'. $node->nid, array('attributes' => array('class' => 'heartbeat-more')));
  $output .= '</div>'; // end heartbeat-teaser div

  $output .= '</div>'; // end heartbeat-indent div

  return $output;
}

/**
 * Theme function for a heartbeat showcase image
 */
function theme_heartbeat_showcase_item($message, $node) {
	// dpm($message);
  $output = '';
  //~ $output .= _theme_heartbeat_icon_left('showcase_image', $message, $node);
  $output .= '<div class="icon-left-margin">' . _theme_heartbeat_user_picture($message->uid) . '</div>';

  $output .= '<div class="heartbeat-indent">';
  
  $account = user_load($node->uid);
  
  $output .= t('!name has added a new @type !title', array(
    '!name' => theme('username', $account),
    '@type' => 'Showcase Item',
    '!title' => ''//l($node->title, 'node/' . $node->nid)
  ));
  //~ $output .= _theme_heartbeat_comment_button($node);
  //~ $output .= $message->rebuild_message();

  $output .= '<div class="heartbeat-teaser">';
  $output .= '<h3>' . l($node->title, 'node/' . $node->nid) . '</h3>';
  $output .= $node->teaser;
  // Articles have an image and optional video
  /*if (isset($node->field_image[0]['fid'])) {
    if (isset($node->field_video[0]['fid'])) {
      $output .= theme('heartbeat_video', $node->nid, $node->field_video[0]['filepath'], $node->field_image[0]['filepath']);
    }
    else {
      $output .= theme('imagecache', 'video_teaser', $node->field_image[0]['filepath']);
    }
  }/**/

  //~ $output .= '<div class="heartbeat-taxonomy-links-wrapper">';
  //~ // Hack todays date's
  //~ if (date('z') == date('z', $node->changed)) {
    //~ $time = date('H:m:s', $node->changed);
  //~ }
  //~ else {
    //~ $time = format_date($node->changed, 'short');
  //~ }
  //~ $output .= '<span>' . $time . '</span>';
  //~ if (!empty($node->taxonomy)) {
    //~ $output .= '<div class="heartbeat-taxonomy-links">';
    //~ foreach ($node->taxonomy as $term) {
      //~ $output .= ' <span>' . l(t($term->name), 'taxonomy/term/'. $term->tid) . '</span>';
    //~ }
    //~ $output .= '</div>';
  //~ }

  $output .= l(t('more'), 'node/'. $node->nid, array('attributes' => array('class' => 'heartbeat-more')));
  //~ $output .= '</div>'; // end taxonomy links wrapper
  $output .= '</div>'; // end heartbeat-teaser div

  $output .= '</div>'; // end heartbeat-indent div

  return $output;
}

/**
 * Theme function for a heartbeat event
 */
function theme_heartbeat_event($message, $node) {

  $output = '';

  $output .= _theme_heartbeat_icon_left('event', $message, $node);

  $output .= '<div class="heartbeat-indent">';

  $output .= _theme_heartbeat_comment_button($node);

  $output .= '<h3>' . l($node->title, 'node/' . $node->nid) . '</h3>';
  $output .= '<div>' . l ($node->name, 'user/' . $message->uid) . ' ';
  $output .= '<strong>' . $node->field_date[0]['value'] . '</strong><br />';
  $output .= '<strong>' . $node->field_where[0]['value'] . '</strong></div>';
  $output .= '<strong>' . node_load(current($node->og_groups))->title . '</strong><br />';
  $output .= '<div>' .  $node->teaser . '</div>';
  $output .= '</div>';

  return $output;
}

/**
 * Theme function for a heartbeat album
 */
function theme_heartbeat_album($message, $node) {

  $output = _theme_heartbeat_icon_left('album', $message, $node);

  $output .= '<div class="heartbeat-indent">';

  $output .= '<div>' .  $node->teaser . '</div>';
  $output .= '<strong>' . node_load(current($node->og_groups))->title . '</strong><br />';

  $output .= '</div>';

  return $output;
}

/**
 * Theme function for a heartbeat group post
 */
function theme_heartbeat_group_post($message, $node) {

  $output = '';

  $output .= '<div class="icon-left-margin">' . _theme_heartbeat_user_picture($message->uid) . '</div>';

  $output .= '<div class="heartbeat-indent">';

  $output .= $message->rebuild_message();

  $output .= '<div class="heartbeat-teaser">';
  $output .= '<strong>' . node_load(current($node->og_groups))->title . '</strong><br />';
  //$output .= '<h3>' . l($node->title, 'node/' . $node->nid) . '</h3>';
  $output .= $node->teaser;
  $output .= '</div>';

  $output .= '</div>';

  return $output;
}

/**
 * Theme function for a heartbeat friends message
 */
function theme_heartbeat_friends($message) {

  $output = '';

  $output .= '<div class="icon-left-margin">' . _theme_heartbeat_user_picture($message->uid) . '</div>';

  // If the message has to be shown anyway (inside the message)
  $display = $message->rebuild_message();
  $output .= '<div class="heartbeat-indent">' . $display . '</div>';

  return $output;
}

/**
 * Theme function for a heartbeat video
 */
function theme_heartbeat_video($nid, $movie, $image = '') {
  global $theme, $base_path;

  $text = '';

  $link = theme('imagecache', 'video_teaser', $image);

  $args = array(
    'attributes' => array(
      'class' => 'heartbeat-video-toggle',
      'onclick' => 'javascript:Drupal.heartbeat.toggleVideo(this); return false;'
    ),
    'html' => TRUE,
  );

  $text .= l($link, "node/$nid", $args);

  $player_url = $base_path . 'flashplayer/player.swf';

  $text .= '<div class="heartbeat-video-wrapper" style="display: none;"><div id="heartbeat-video-'. $nid .'"></div></div>';
  $text .= '
  <script type="text/javascript">
    var flashvars = {
      bufferlength:5,
      author:0,
      screencolor:"FFFFFF",
      id:"heartbeat-video-'. $nid .'",
      autostart:true,
      controlbar:"over",
      file:"' . $base_path . $movie . '",
      skin:"' . $base_path . 'flashplayer/modieus.swf"
    };
    var params = {
      menu: false,
      bgcolor: "#000000",
      allowfullscreen: true,
      allowscriptaccess: "always",
      bgcolor: "#000000",
    };
    var attributes = {};
    swfobject.embedSWF("' . $player_url . '", "heartbeat-video-'. $nid .'", "280", "158", "9.0.0","expressInstall.swf", flashvars, params, attributes);

  </script>';

  return $text;
}


/**
 * Theme function for heartbeat comment
 * @param $comment Object comment with user in it
 * @param $type Boolean to indicate whether it is a node comment or not
 * @param $last Boolean to indicate if an extra class has to be used
 * @return String Themed output for a comment
 *//*
function hbi_heartbeat_comment($comment, $node_comment = FALSE, $last = FALSE) {

  $output = '**';
  if ($last == TRUE) {
    $class = "heartbeat-comment-last";
  }
  else {
    $class = "";
  }
  $output .= '<li class="heartbeat-comment '. $class .'" id="heartbeat-comment-' . ($node_comment ? $comment->cid : $comment->hcid) .'">';
  $avatar = theme('user_picture', $comment);
  $output .= '<span class="avatar">' . l($avatar, 'user/' . $comment->uid, array('html' => TRUE)) . '</span>';

  $account = heartbeat_user_load($comment->uid);

  $output .= '<div class="heartbeat-teaser">';
  $output .= l($account->name, 'user/' . $comment->uid) . ' ';
  $output .= $comment->comment;
  $output .= '</div>';

  // For node comments link to the standard Drupal comment deletion form under comment/delete/%
  // Only users who have the right permissions should see the delete link.
  // Permissions are provided by the "Comment Delete" module.
  global $user;
  if ($node_comment) {
    if (user_access('delete any comment') || ($user->uid == $comment->uid && user_access('delete own comments'))) {
      $output .= l(t('Delete'), 'heartbeat/nodecomment/delete/'. $comment->cid, array('attributes' => array('class' => 'heartbeat-comment-delete'), 'query' => drupal_get_destination(), 'alias' => TRUE));
    }
  }
  // For Heartbeat comments link to an own deletion form.
  // Only users who have the right permissions or are the commenting person should see the delete link.
  // Permissions are provided by Heartbeat itself ("administer heartbeat comments').
  elseif(user_access('administer heartbeat comments') || ($comment->uid && $user->uid && $comment->uid == $user->uid)) {
    $output .= l(t('Delete'), 'heartbeat/comment/delete/'. $comment->hcid, array('attributes' => array('class' => 'heartbeat-comment-delete'), 'query' => drupal_get_destination(), 'alias' => TRUE));
  }

  $output .= '</li>';

  return $output;
}

/**
 * Helper theme function for the stream buttons
 *//*
function _bigstream_buttons() {

  $output = '
  <ul id="heartbeat-bigstream-buttons">

    <li class="siteactivity">' . l(t('Site activity'), 'heartbeat/siteactivity',
      array('attributes' => array('onclick' => 'javascript:Drupal.heartbeat.toggleBigStream(\'siteactivity\'); return false;'))) . '</li>
    <li class="publicheartbeat">' . l(t('Public activity'), 'heartbeat/publicheartbeat',
      array('attributes' => array('onclick' => 'javascript:Drupal.heartbeat.toggleBigStream(\'publicheartbeat\'); return false;'))) . '</li>
    ';
  if (user_is_logged_in()) {
   $output .= '
    <li class="privateheartbeat">' . l(t('Personal activity'), 'heartbeat/privateheartbeat',
      array('attributes' => array('onclick' => 'javascript:Drupal.heartbeat.toggleBigStream(\'privateheartbeat\'); return false;'))) . '</li>
    <li class="connectedheartbeat">' . l(t('Relational activity'), 'heartbeat/connectedheartbeat',
      array('attributes' => array('onclick' => 'javascript:Drupal.heartbeat.toggleBigStream(\'connectedheartbeat\'); return false;'))) . '</li>
    ';
  }
   $output .= '
  </ul>
  ';

   return $output;

}/**/
